package main

import (
	"bufio"
	"fmt"
	"log"
	"os"
	"strconv"
	"strings"
	"time"
	"unicode"

	"tgBotUborochka/names"
	"tgBotUborochka/notification"
	"tgBotUborochka/token"

	"github.com/robfig/cron/v3"
	tele "gopkg.in/telebot.v3"
)

// –ø—É—Ç–∏ –æ—Ç–∫—É–¥–∞ —Å—á–∏—Ç—ã–≤–∞—Ç—å —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ –∫—É–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∏–º–µ–Ω–∞ —Å ID –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const (
	//–ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
	filePathNotifications = "D:\\GoLangProjects\\tgBotUborochka\\saves\\UsersNotifications.txt"
	filePathToken         = "D:\\GoLangProjects\\tgBotUborochka\\saves\\Token.txt"
	filePathNames         = "D:\\GoLangProjects\\tgBotUborochka\\saves\\Names.txt"

	//–º–∏–Ω,—á–∞—Å,–¥–µ–Ω—å –º–µ—Å—è—Ü–∞,–º–µ—Å—è—Ü,–¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏(–≤—Å=0,–ø–Ω=1,–≤—Ç=2,...,—Å–±=6)
	// * = –ª—é–±–æ–µ
	// —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ

	//–≤—Ä–µ–º—è –æ—Ç—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –¥–µ–∂—É—Ä—Å—Ç–≤–∞
	timeSendNotificationStartDuty = "0 18 * * 1"
	//–≤—Ä–µ–º—è –æ—Ç—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–µ–∂—É—Ä—Å—Ç–≤–µ –≤–µ—á–µ—Ä–æ–º
	timeSendNotification–°leaning = "0 18 * * 2,4,0"
)

func check(err error, s string) {
	if err != nil {
		log.Println(s)
		log.Fatal(err)
	}
}

func main() {
	//–≤—Ä–µ–º—è –æ—Ç—Å—á–µ—Ç–∞ –¥–µ–∂—É—Ä—Å—Ç–≤–∞ –ø–µ—Ä–≤–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
	//–≥–æ–¥,–º–µ—Å—è—Ü,–¥–µ–Ω—å,—á–∞—Å,–º–∏–Ω—É—Ç–∞,—Å–µ–∫—É–Ω–¥–∞,–Ω–∞–Ω–æ—Å–µ–∫,
	firstWeek := time.Date(2024, 12, 23, 0, 1, 0, 0, time.Local)

	tgNames, err := names.GetNames(filePathNames)
	check(err, "–ù–µ —Å—á–∏—Ç–∞–ª–∏—Å—å –∏–º–µ–Ω–∞")

	// –ø–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
	tgToken, err := token.GetToken(filePathToken)
	check(err, "–ù–µ —Å—á–∏—Ç–∞–ª—Å—è —Ç–æ–∫–µ–Ω")

	// –≥–ª–∞–≤–Ω–æ–µ
	menuMain := &tele.ReplyMarkup{ResizeKeyboard: true}
	// –º–µ–Ω—é –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
	menuNotification := &tele.ReplyMarkup{ResizeKeyboard: true}

	// –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
	btnWhoClean := menuMain.Text("üßπ –ö—Ç–æ —É–±–∏—Ä–∞–µ—Ç—Å—è –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ? üßπ")
	btnNotification := menuMain.Text("üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è üîî")
	btnNotificationOff := menuMain.Text("üîï –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è üîï")

	// –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–≥–æ, –∫—Ç–æ —Ç—ã
	// —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

	var rows []tele.Row // –°–æ–∑–¥–∞–µ–º —Å—Ä–µ–∑ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç—Ä–æ–∫ –∫–Ω–æ–ø–æ–∫

	for _, name := range tgNames {
		// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π
		row := tele.Row{menuNotification.Text(name)}
		rows = append(rows, row) // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ –æ–±—â–∏–π —Å—Ä–µ–∑
	}

	// –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å rows –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é
	menuNotification.Reply(rows...)

	menuMain.Reply(
		menuMain.Row(btnWhoClean),
		menuMain.Row(btnNotification),
		menuMain.Row(btnNotificationOff),
	)

	pref := tele.Settings{
		Token:  tgToken,
		Poller: &tele.LongPoller{Timeout: 10 * time.Second},
	}

	b, err := tele.NewBot(pref)
	check(err, "–ù–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –±–æ—Ç")

	// –ö–ù–û–ü–û–ß–ö–ò

	b.Handle(&btnWhoClean, func(c tele.Context) error {
		resp := WhoCleaningThisWeek(firstWeek, tgNames)
		return c.Send(resp)
	})
	b.Handle(&btnNotification, func(c tele.Context) error {
		return c.Send("–í—ã–±–µ—Ä–µ—Ç–µ —Å–µ–±—è –∏–∑ —Å–ø–∏—Å–∫–∞. –ß—Ç–æ–±—ã –≤—ã –ø–æ–ª—É—á–∞–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.", menuNotification)
	})
	b.Handle(&btnNotificationOff, func(c tele.Context) error {
		stringID := c.Recipient().Recipient()
		deleted, err := notification.ExcludeLines(filePathNotifications, stringID)
		if err != nil {
			return err
		}
		if deleted {
			return c.Send("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã")
		}
		return c.Send("–£ –≤–∞—Å –Ω–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
	})

	// –ö–û–ú–ê–ù–î–´

	b.Handle("/start", func(c tele.Context) error {
		return c.Send("–û—Ç–∫—Ä—ã—Ç–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", menuMain)
	})
	b.Handle("–º–µ–Ω—é", func(c tele.Context) error {
		return c.Send("–û—Ç–∫—Ä—ã—Ç–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", menuMain)
	})
	b.Handle("–∫—Ç–æ", func(c tele.Context) error {
		resp := WhoCleaningThisWeek(firstWeek, tgNames)
		return c.Send(resp)
	})

	// –µ—Å–ª–∏ –Ω–∞–ø–∏—Å–∞–ª–∏ –∏–º—è –∏–∑ —Å–ø–∏—Å–∫–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
	for _, name := range tgNames {
		b.Handle(name, func(c tele.Context) error {
			return addNotificationName(c, filePathNotifications, menuMain)
		})
	}

	//–¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
	c := cron.New()
	// –∑–∞–ø—É—Å cron –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
	c.Start()
	defer c.Stop()

	// –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
	_, err = c.AddFunc(timeSendNotificationStartDuty, func() {
		err = sendNotification(
			"üì£ –ü—Ä–∏–≤–µ—Ç, %s.\n–ù–∞—Å—Ç—É–ø–∏–ª–∞ —Ç–≤–æ—è –Ω–µ–¥–µ–ª—è —É–±–æ—Ä–∫–∏ –Ω–∞ –∫—É—Ö–Ω–µ.\n", // messageTemplate
			firstWeek, tgNames, filePathNotifications, b,
		)
		check(err, "–ù–µ –∑–∞–ø—É—Å—Ç–∏–ª–∏—Å—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –Ω–µ–¥–µ–ª–∏")
	})

	_, err = c.AddFunc(timeSendNotification–°leaning, func() {
		err = sendNotification(
			"üïí –ü—Ä–∏–≤–µ—Ç, %s.\n–ù–µ –∑–∞–±—É–¥—å —É–±—Ä–∞—Ç—å—Å—è —Å–µ–≥–æ–¥–Ω—è –Ω–∞ –∫—É—Ö–Ω–µ.\n–•–æ—Ä–æ—à–µ–≥–æ —Ç–µ–±–µ –≤–µ—á–µ—Ä–∞ üòâ.\n", // messageTemplate
			firstWeek, tgNames, filePathNotifications, b,
		)
		check(err, "–ù–µ –∑–∞–ø—É—Å—Ç–∏–ª–∏—Å—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–µ–∂—É—Ä—Å—Ç–≤–µ")
	})

	// –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∏–∫–∞
	b.Start()
	defer b.Stop()
}

func WhoCleaningThisWeek(startTime time.Time, tgNames []string) string {
	dur := time.Since(startTime)
	numCleaner := int(dur.Hours()/24/7) % len(tgNames)

	return tgNames[numCleaner]
}

// –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –∏–º–µ–Ω
func addNotificationName(c tele.Context, filePathNotifications string, menuMain *tele.ReplyMarkup) error {
	ID := c.Recipient().Recipient()
	_, err := notification.ExcludeLines(filePathNotifications, ID)
	if err != nil {
		return err
	}

	newLine := fmt.Sprintf("%s %s\n", c.Text(), ID)
	err = notification.AppendLine(filePathNotifications, newLine)
	if err != nil {
		return err
	}

	return c.Send("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚úÖ", menuMain)
}

// —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
func sendNotification(messageTemplate string, firstWeek time.Time, tgNames []string, filePathNotifications string, b *tele.Bot) error {
	whoCleaning := WhoCleaningThisWeek(firstWeek, tgNames)

	file, err := os.Open(filePathNotifications)
	if err != nil {
		return err
	}
	defer file.Close()

	scanner := bufio.NewScanner(file)
	for scanner.Scan() {
		line := scanner.Text()
		if strings.Contains(line, whoCleaning) {
			stringID := strings.TrimFunc(line, func(r rune) bool {
				return !unicode.IsNumber(r)
			})
			ID, err := strconv.Atoi(stringID)
			if err != nil {
				return err
			}

			chat, err := b.ChatByID(int64(ID))
			if err != nil {
				return err
			}

			message := fmt.Sprintf(messageTemplate, whoCleaning)
			_, err = b.Send(chat, message)
			if err != nil {
				return err
			}
		}
	}
	return err
}
