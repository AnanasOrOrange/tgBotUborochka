package main

import (
	"bufio"
	"fmt"
	"github.com/robfig/cron/v3"
	"log"
	"os"
	"strconv"
	"strings"
	"time"
	"unicode"

	"tgBotUborochka/notification"
	"tgBotUborochka/token"

	tele "gopkg.in/telebot.v3"
)

// –ø—É—Ç–∏ –æ—Ç–∫—É–¥–∞ —Å—á–∏—Ç—ã–≤–∞—Ç—å —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ –∫—É–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∏–º–µ–Ω–∞ —Å ID –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const (
	filePathNotifications = "D:\\GoLangProjects\\tgBotUborochka\\saves\\UsersNotifications.txt"
	filePathToken         = "D:\\GoLangProjects\\tgBotUborochka\\saves\\Token.txt"
)

func check(err error, s string) {
	if err != nil {
		log.Println(s)
		log.Fatal(err)
	}
}

func main() {

	// Universal markup builders.
	// –≥–ª–∞–≤–Ω–æ–µ
	menuMain := &tele.ReplyMarkup{ResizeKeyboard: true}
	// –º–µ–Ω—é –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
	menuNotification := &tele.ReplyMarkup{ResizeKeyboard: true}

	// Reply buttons.
	// –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
	//btnHelp := menuMain.Text("‚Ñπ Help")
	btnWhoClean := menuMain.Text("üßπ –ö—Ç–æ —É–±–∏—Ä–∞–µ—Ç—Å—è –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ? üßπ")
	btnNotification := menuMain.Text("üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è üîî")
	btnNotificationOff := menuMain.Text("üîï –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è üîï")

	// –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–≥–æ, –∫—Ç–æ —Ç—ã
	// —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
	btn0 := menuNotification.Text("–°—É—Ä–æ–≤ –ê–ª–µ–∫—Å–µ–π")
	btn1 := menuNotification.Text("–î—É–¥–æ—Ä–æ–≤–∞ –ï–≤–∞")
	btn2 := menuNotification.Text("–î—É—Ä–∞–µ–≤ –î–º–∏—Ç—Ä–∏–π")
	btn3 := menuNotification.Text("–ü–æ–¥–º–∞—Ä–µ–≤ –ù–∏–∫–∏—Ç–∞")
	btn4 := menuNotification.Text("–î—É–¥–æ—Ä–æ–≤ –ù–∏–∫–∏—Ç–∞")
	btn5 := menuNotification.Text("–¢–æ–ø–∞–∑–æ–≤ –°–µ—Ä–≥–µ–π")
	btn6 := menuNotification.Text("–°—Ç–æ–ª—è—Ä–æ–≤ –î–º–∏—Ç—Ä–∏–π")

	menuMain.Reply(
		//menu.Row(btnHelp),
		menuMain.Row(btnWhoClean),
		menuMain.Row(btnNotification),
		menuMain.Row(btnNotificationOff),
	)

	menuNotification.Reply(
		menuMain.Row(btn0),
		menuMain.Row(btn1),
		menuMain.Row(btn2),
		menuMain.Row(btn3),
		menuMain.Row(btn4),
		menuMain.Row(btn5),
		menuMain.Row(btn6),
	)

	firstWeek := time.Date(2024, 12, 16, 0, 1, 0, 0, time.Local)

	// –ø–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
	tgToken, err := token.GetToken(filePathToken)
	check(err, "–ù–µ —Å—á–∏—Ç–∞–ª—Å—è —Ç–æ–∫–µ–Ω")

	pref := tele.Settings{
		Token:  tgToken,
		Poller: &tele.LongPoller{Timeout: 10 * time.Second},
	}

	b, err := tele.NewBot(pref)
	check(err, "–ù–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –±–æ—Ç")

	// –ö–ù–û–ü–û–ß–ö–ò

	// On reply button pressed (message)
	//b.Handle(&btnHelp, func(c tele.Context) error {
	//	return c.Edit("Here is some help: ...")
	//})

	b.Handle(&btnWhoClean, func(c tele.Context) error {
		resp := WhoCleaningThisWeek(firstWeek)
		return c.Send(resp)
	})
	b.Handle(&btnNotification, func(c tele.Context) error {
		return c.Send("–í—ã–±–µ—Ä–µ—Ç–µ —Å–µ–±—è –∏–∑ —Å–ø–∏—Å–∫–∞. –ß—Ç–æ–±—ã –≤—ã –ø–æ–ª—É—á–∞–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.", menuNotification)
	})
	b.Handle(&btnNotificationOff, func(c tele.Context) error {
		stringID := c.Recipient().Recipient()
		deleted, err := notification.ExcludeLines(filePathNotifications, stringID)
		if err != nil {
			return err
		}
		if deleted {
			return c.Send("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã")
		}
		return c.Send("–£ –≤–∞—Å –Ω–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
	})

	// –ö–û–ú–ê–ù–î–´

	b.Handle("/start", func(c tele.Context) error {
		return c.Send("–û—Ç–∫—Ä—ã—Ç–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", menuMain)
	})
	b.Handle("–º–µ–Ω—é", func(c tele.Context) error {
		return c.Send("–û—Ç–∫—Ä—ã—Ç–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", menuMain)
	})
	b.Handle("–∫—Ç–æ", func(c tele.Context) error {
		resp := WhoCleaningThisWeek(firstWeek)
		return c.Send(resp)
	})

	b.Handle("–°—É—Ä–æ–≤ –ê–ª–µ–∫—Å–µ–π", func(c tele.Context) error {
		ID := c.Recipient().Recipient()
		_, err := notification.ExcludeLines(filePathNotifications, ID)
		if err != nil {
			return err
		}

		stingID := c.Recipient().Recipient()
		newLine := fmt.Sprintf("%s %s\n", c.Text(), stingID)

		err = notification.AppendLine(filePathNotifications, newLine)
		if err != nil {
			return err
		}
		return c.Send("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚úÖ", menuMain)
	})
	b.Handle("–î—É–¥–æ—Ä–æ–≤–∞ –ï–≤–∞", func(c tele.Context) error {
		ID := c.Recipient().Recipient()
		_, err := notification.ExcludeLines(filePathNotifications, ID)
		if err != nil {
			return err
		}

		stingID := c.Recipient().Recipient()
		newLine := fmt.Sprintf("%s %s\n", c.Text(), stingID)

		err = notification.AppendLine(filePathNotifications, newLine)
		if err != nil {
			return err
		}
		return c.Send("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚úÖ", menuMain)
	})
	b.Handle("–î—É—Ä–∞–µ–≤ –î–º–∏—Ç—Ä–∏–π", func(c tele.Context) error {
		ID := c.Recipient().Recipient()
		_, err := notification.ExcludeLines(filePathNotifications, ID)
		if err != nil {
			return err
		}

		stingID := c.Recipient().Recipient()
		newLine := fmt.Sprintf("%s %s\n", c.Text(), stingID)

		err = notification.AppendLine(filePathNotifications, newLine)
		if err != nil {
			return err
		}
		return c.Send("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚úÖ", menuMain)
	})
	b.Handle("–ü–æ–¥–º–∞—Ä–µ–≤ –ù–∏–∫–∏—Ç–∞", func(c tele.Context) error {
		ID := c.Recipient().Recipient()
		_, err := notification.ExcludeLines(filePathNotifications, ID)
		if err != nil {
			return err
		}

		stingID := c.Recipient().Recipient()
		newLine := fmt.Sprintf("%s %s\n", c.Text(), stingID)

		err = notification.AppendLine(filePathNotifications, newLine)
		if err != nil {
			return err
		}
		return c.Send("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚úÖ", menuMain)
	})
	b.Handle("–î—É–¥–æ—Ä–æ–≤ –ù–∏–∫–∏—Ç–∞", func(c tele.Context) error {
		ID := c.Recipient().Recipient()
		_, err := notification.ExcludeLines(filePathNotifications, ID)
		if err != nil {
			return err
		}

		stingID := c.Recipient().Recipient()
		newLine := fmt.Sprintf("%s %s\n", c.Text(), stingID)

		err = notification.AppendLine(filePathNotifications, newLine)
		if err != nil {
			return err
		}
		return c.Send("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚úÖ", menuMain)
	})
	b.Handle("–¢–æ–ø–∞–∑–æ–≤ –°–µ—Ä–≥–µ–π", func(c tele.Context) error {
		ID := c.Recipient().Recipient()
		_, err := notification.ExcludeLines(filePathNotifications, ID)
		if err != nil {
			return err
		}

		stingID := c.Recipient().Recipient()
		newLine := fmt.Sprintf("%s %s\n", c.Text(), stingID)

		err = notification.AppendLine(filePathNotifications, newLine)
		if err != nil {
			return err
		}
		return c.Send("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚úÖ", menuMain)
	})
	b.Handle("–°—Ç–æ–ª—è—Ä–æ–≤ –î–º–∏—Ç—Ä–∏–π", func(c tele.Context) error {
		ID := c.Recipient().Recipient()
		_, err := notification.ExcludeLines(filePathNotifications, ID)
		if err != nil {
			return err
		}

		stingID := c.Recipient().Recipient()
		newLine := fmt.Sprintf("%s %s\n", c.Text(), stingID)

		err = notification.AppendLine(filePathNotifications, newLine)
		if err != nil {
			return err
		}
		return c.Send("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚úÖ", menuMain)
	})

	//–¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
	c := cron.New()
	// –∑–∞–ø—É—Å cron –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
	c.Start()
	defer c.Stop()

	// –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
	//_, err = c.AddFunc("0 8 * * 1", func() {
	_, err = c.AddFunc("0 18 * * 1", func() {
		whoCleaning := WhoCleaningThisWeek(firstWeek)

		file, err := os.Open(filePathNotifications)
		if err != nil {
			log.Fatal(err)
		}
		defer file.Close()

		scanner := bufio.NewScanner(file)
		for scanner.Scan() {
			line := scanner.Text()
			if strings.Contains(line, whoCleaning) {
				stringID := strings.TrimFunc(line, func(r rune) bool {
					return !unicode.IsNumber(r)
				})
				ID, err := strconv.Atoi(stringID)
				if err != nil {
					log.Println(err)
				}
				chat, err := b.ChatByID(int64(ID))
				if err != nil {
					log.Println(err)
				}
				message := fmt.Sprintf(
					"üì£ –ü—Ä–∏–≤–µ—Ç, %s.\n–ù–∞—Å—Ç—É–ø–∏–ª–∞ —Ç–≤–æ—è –Ω–µ–¥–µ–ª—è —É–±–æ—Ä–∫–∏ –Ω–∞ –∫—É—Ö–Ω–µ.\n",
					whoCleaning,
				)

				_, err = b.Send(chat, message)
				if err != nil {
					log.Println(err)
				}
			}
		}
		if err := scanner.Err(); err != nil {
			log.Fatal(err)
		}
	})
	check(err, "–ù–µ –∑–∞–ø—É—Å—Ç–∏–ª–∏—Å—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –Ω–µ–¥–µ–ª–∏")

	_, err = c.AddFunc("0 18 * * 2,4,0", func() {
		whoCleaning := WhoCleaningThisWeek(firstWeek)

		file, err := os.Open(filePathNotifications)
		if err != nil {
			log.Fatal(err)
		}
		defer file.Close()

		scanner := bufio.NewScanner(file)
		for scanner.Scan() {
			line := scanner.Text()
			if strings.Contains(line, whoCleaning) {
				stringID := strings.TrimFunc(line, func(r rune) bool {
					return !unicode.IsNumber(r)
				})
				ID, err := strconv.Atoi(stringID)
				if err != nil {
					log.Println(err)
				}
				chat, err := b.ChatByID(int64(ID))
				if err != nil {
					log.Println(err)
				}

				message := fmt.Sprintf(
					"üïí –ü—Ä–∏–≤–µ—Ç, %s.\n–ù–µ –∑–∞–±—É–¥—å —É–±—Ä–∞—Ç—å—Å—è —Å–µ–≥–æ–¥–Ω—è –Ω–∞ –∫—É—Ö–Ω–µ.\n–•–æ—Ä–æ—à–µ–≥–æ —Ç–µ–±–µ –≤–µ—á–µ—Ä–∞ üòâ.\n",
					whoCleaning,
				)

				_, err = b.Send(chat, message)
				if err != nil {
					log.Println(err)
				}
			}
		}
		if err := scanner.Err(); err != nil {
			log.Fatal(err)
		}
	})
	check(err, "–ù–µ –∑–∞–ø—É—Å—Ç–∏–ª–∏—Å—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–µ–∂—É—Ä—Å—Ç–≤–µ")

	// –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∏–∫–∞
	b.Start()
	defer b.Stop()
}

func WhoCleaningThisWeek(startTime time.Time) string {
	names := []string{
		"–°—É—Ä–æ–≤ –ê–ª–µ–∫—Å–µ–π",
		"–î—É–¥–æ—Ä–æ–≤–∞ –ï–≤–∞",
		"–î—É—Ä–∞–µ–≤ –î–º–∏—Ç—Ä–∏–π",
		"–ü–æ–¥–º–∞—Ä–µ–≤ –ù–∏–∫–∏—Ç–∞",
		"–î—É–¥–æ—Ä–æ–≤ –ù–∏–∫–∏—Ç–∞",
		"–¢–æ–ø–∞–∑–æ–≤ –°–µ—Ä–≥–µ–π",
		//"–°—Ç–æ–ª—è—Ä–æ–≤ –î–º–∏—Ç—Ä–∏–π",
	}
	dur := time.Since(startTime)
	numCleaner := int(dur.Hours()/24/7) % len(names)

	return names[numCleaner]
}
